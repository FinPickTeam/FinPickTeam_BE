<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.scoula.finance.mapper.StockMapper">


    <!-- 상세 정보 매핑 -->
    <resultMap id="StockAccessTokenMap" type="org.scoula.finance.dto.stock.StockAccessTokenDto">
        <result property="id" column="id"/>
        <result property="stockAccessToken" column="stock_access_token"/>
        <result property="stockTokenExpiresDt" column="stock_token_expires_dt"/>
    </resultMap>

    <insert id="saveOrUpdateToken" parameterType="org.scoula.finance.dto.stock.StockAccessTokenDto">
        INSERT INTO user_kiwoom_access_token(
                                             id,
                                             user_account,
                                             stock_access_token,
                                             stock_token_expires_dt
        ) VALUES (
                  #{id},
                  #{stockAccount},
                  #{stockAccessToken},
                  #{stockTokenExpiresDt}
                         )
        ON DUPLICATE KEY UPDATE
            user_account = VALUES(user_account),
            stock_access_token = VALUES(stock_access_token),
            stock_token_expires_dt = VALUES(stock_token_expires_dt)
    </insert>

    <select id="getUserAccount" parameterType="org.scoula.finance.dto.stock.StockAccountDto" resultType="string">
        SELECT user_account
        FROM user_kiwoom_access_token
        WHERE id = #{id}
    </select>
    
    <select id="getUserToken" parameterType="org.scoula.finance.dto.stock.StockAccessTokenDto" resultType="string">
        SELECT stock_access_token
        FROM user_kiwoom_access_token
        WHERE id = #{id}
    </select>

    <select id="getStockList" resultType="org.scoula.finance.dto.stock.StockListDataDto">
        SELECT
        stock_code AS stockCode,
        stock_name AS stockName,
        stock_returns_data AS stockReturnsData,
        market_type AS stockMarketType,
        stock_summary AS stockSummary
        FROM stock_list
        WHERE 1=1
        <if test="marketType != null and marketType != ''">
            AND market_type = UPPER(#{marketType})
        </if>

        <choose>
            <when test="sortByStockName != null and sortByStockName != ''">
                ORDER BY stock_name
                <if test="sortByStockName == 'desc'">
                    DESC
                </if>
                <if test="sortByStockName == 'asc'">
                    ASC
                </if>
            </when>
            <when test="sortByStockPrice != null and sortByStockPrice != ''">
                ORDER BY stock_returns_data
                <if test="sortByStockPrice == 'desc'">
                    DESC
                </if>
                <if test="sortByStockPrice == 'asc'">
                    ASC
                </if>
            </when>
            <otherwise>
                ORDER BY stock_name ASC
            </otherwise>
        </choose>
    </select>

    <update id="updateStockReturnsData" parameterType="map">
        UPDATE stock_list
        SET stock_returns_data = #{stockReturnsData}
        WHERE stock_code = #{stockCode}
    </update>
    
    <select id="getStockCodeList" resultType="map">
        SELECT
            stock_code,
            market_type AS stock_market
        FROM stock_list
    </select>

    <select id="getStockListDataByStockCode" resultType="org.scoula.finance.dto.stock.StockListDataDto">
        SELECT
            stock_code AS stockCode,
            stock_name AS stockName,
            stock_returns_data AS stockReturnsData,
            market_type AS stockMarketType,
            stock_summary AS stockSummary
        FROM stock_list
        WHERE stock_code = #{stockCode}
    </select>

    <insert id="insertStockFactorData" parameterType="org.scoula.finance.dto.stock.StockFactorDto">
        INSERT INTO factor_list( date, smb, hml, mom, kospi, kosdaq)
        VALUES (#{date}, #{smb}, #{hml}, #{mom}, #{kospi}, #{kosdaq})
            ON DUPLICATE KEY UPDATE
                                 smb = VALUES(smb),
                                 hml = VALUES(hml),
                                 mom = VALUES(mom),
                                 kospi = VALUES(kospi),
                                 kosdaq = VALUES(kosdaq);
    </insert>

    <select id="getStockFactorData" resultType="org.scoula.finance.dto.stock.StockFactorDto">
        SELECT
            *
        FROM factor_list
        ORDER BY date DESC
        LIMIT 13
    </select>

    <select id="getStockDivByStockCode" resultType="org.scoula.finance.dto.stock.StockCompareDataDto">
        SELECT stock_div
        FROM stock_list
        WHERE stock_code = #{stockCode}
    </select>
</mapper>
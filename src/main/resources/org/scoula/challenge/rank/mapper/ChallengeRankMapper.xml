<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.scoula.challenge.rank.mapper.ChallengeRankMapper">

    <!-- 현재 랭킹 조회: user & user_status에서 닉네임 보강 -->
    <select id="getCurrentChallengeRanks"
            resultType="org.scoula.challenge.rank.dto.ChallengeRankResponseDTO">
        SELECT
            u.id                                               AS userId,
            COALESCE(us.nickname, u.nickname)                 AS nickname,
            cr.rank                                           AS rank,
            uc.actual_value                                   AS actualValue
        FROM challenge_rank cr
                 JOIN user_challenge uc ON uc.id = cr.user_challenge_id
                 JOIN user u           ON u.id = uc.user_id
                 LEFT JOIN user_status us ON us.id = u.id
        WHERE uc.challenge_id = #{challengeId}
        ORDER BY cr.rank ASC
    </select>

    <!-- 해당 챌린지 행 전체 제거(비상 시) -->
    <delete id="clearCurrentChallengeRanks">
        DELETE cr
    FROM challenge_rank cr
    JOIN user_challenge uc ON uc.id = cr.user_challenge_id
    WHERE uc.challenge_id = #{challengeId}
    </delete>

    <!-- (레거시) 단순 insert -->
    <insert id="insertChallengeRank">
        INSERT INTO challenge_rank (user_challenge_id, rank, actual_value, updated_at)
        VALUES (#{userChallengeId}, #{rank}, #{actualValue}, NOW())
    </insert>

    <!-- 스냅샷 읽기 -->
    <select id="getChallengeRankSnapshots"
            resultType="org.scoula.challenge.rank.dto.ChallengeRankSnapshotResponseDTO">
        SELECT
            u.id                                AS userId,
            COALESCE(us.nickname, u.nickname)   AS nickname,
            crs.rank                            AS rank,
            crs.actual_value                    AS actualValue,
            crs.month                           AS month,
      crs.is_checked                      AS isChecked
        FROM challenge_rank_snapshot crs
            JOIN user_challenge uc ON crs.user_challenge_id = uc.id
            JOIN user u            ON u.id = uc.user_id
            LEFT JOIN user_status us ON us.id = u.id
        WHERE crs.month = #{month}
        ORDER BY crs.rank ASC
    </select>

    <!-- 스냅샷 저장 -->
    <insert id="insertChallengeRankSnapshot">
        INSERT INTO challenge_rank_snapshot
            (user_challenge_id, month, rank, actual_value, is_checked, created_at)
        VALUES
            (#{userChallengeId}, #{month}, #{rank}, #{actualValue}, 0, NOW())
    </insert>

    <!-- ParticipantInfo 매핑 -->
    <resultMap id="participantInfoMap"
               type="org.scoula.challenge.rank.util.ChallengeParticipantProvider$ParticipantInfo">
        <result property="userChallengeId" column="user_challenge_id"/>
        <result property="actualValue"     column="actual_value"/>
    </resultMap>

    <!-- 실제 값 기준 정렬: 값 같으면 과거 참여 많은 사람이 유리 -->
    <select id="getParticipantsSortedByActualValue" resultMap="participantInfoMap">
        SELECT
            uc.id          AS user_challenge_id,
            uc.actual_value
        FROM user_challenge uc
                 JOIN challenge c ON uc.challenge_id = c.id
        WHERE c.id = #{challengeId}
          AND c.type = 'COMMON'
        ORDER BY uc.actual_value ASC,
                 (SELECT COUNT(*) FROM user_challenge sub WHERE sub.user_id = uc.user_id) DESC
    </select>

    <select id="getParticipantsSortedByActualValueInMonth" resultMap="participantInfoMap">
        SELECT
            uc.id          AS user_challenge_id,
            uc.actual_value
        FROM user_challenge uc
                 JOIN challenge c ON uc.challenge_id = c.id
        WHERE c.type = 'COMMON'
          AND DATE_FORMAT(c.start_date, '%Y-%m') = #{month}
        ORDER BY uc.actual_value ASC,
                 (SELECT COUNT(*) FROM user_challenge sub WHERE sub.user_id = uc.user_id) DESC
    </select>

    <!-- UPSERT: 삭제 없이 최신화 -->
    <insert id="upsertChallengeRank">
        INSERT INTO challenge_rank (user_challenge_id, rank, actual_value, updated_at)
        VALUES (#{userChallengeId}, #{rank}, #{actualValue}, NOW())
            ON DUPLICATE KEY UPDATE
                                 rank         = VALUES(rank),
                                 actual_value = VALUES(actual_value),
                                 updated_at   = NOW()
    </insert>

    <!-- 이번 계산에 포함되지 않은 행 정리 (탈퇴/제외 등) -->
    <delete id="deleteRanksNotIn">
        DELETE cr
        FROM challenge_rank cr
        JOIN user_challenge uc ON uc.id = cr.user_challenge_id
        WHERE uc.challenge_id = #{challengeId}
        AND cr.user_challenge_id NOT IN
        <foreach item="id" collection="userChallengeIds" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

</mapper>

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.scoula.challenge.mapper.ChallengeMapper">

    <insert id="insertChallenge" parameterType="org.scoula.challenge.domain.Challenge" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO challenge
        (title, category_id, start_date, end_date, description, type, max_participants, password, use_password, writer_id, status, goal_type, goal_value, participant_count, reward_point)
        VALUES
            (#{title}, #{categoryId}, #{startDate}, #{endDate}, #{description}, #{type}, #{maxParticipants}, #{password}, #{usePassword}, #{writerId}, #{status}, #{goalType}, #{goalValue}, #{participantCount}, #{rewardPoint})
    </insert>

    <insert id="insertUserChallenge">
        INSERT INTO user_challenge (user_id, challenge_id, is_creator, is_completed, actual_value, is_success)
        VALUES (#{userId}, #{challengeId}, #{isCreator}, #{isCompleted}, #{actualValue}, #{isSuccess,jdbcType=TINYINT});
    </insert>

    <select id="countUserOngoingChallenges" resultType="int">
        SELECT COUNT(1)
        FROM user_challenge uc
                 JOIN challenge c ON c.id = uc.challenge_id
        WHERE uc.user_id = #{userId}
          AND c.type = #{type}
          AND (
            c.status IN ('RECRUITING','IN_PROGRESS', 'CLOSED')
                OR (c.status = 'COMPLETED' AND uc.result_checked = 0)
            )
    </select>

    <select id="findChallenges" resultType="org.scoula.challenge.domain.Challenge">
        SELECT * FROM challenge
        WHERE (#{type} IS NULL OR type = #{type})
          AND (#{status} IS NULL OR status = #{status})
    </select>

    <select id="findUserChallengeIds" resultType="long">
        SELECT challenge_id FROM user_challenge
        WHERE user_id = #{userId}
    </select>

    <select id="getUserProgress" resultType="double">
        SELECT CASE
                   WHEN c.goal_value IS NULL OR c.goal_value = 0 THEN NULL
                   ELSE uc.actual_value * 1.0 / c.goal_value
                   END
        FROM user_challenge uc
                 JOIN challenge c ON uc.challenge_id = c.id
        WHERE uc.user_id = #{userId} AND uc.challenge_id = #{challengeId}
    </select>

    <select id="getGroupAverageProgress" resultType="double">
        SELECT AVG(
                       CASE WHEN c.goal_value IS NULL OR c.goal_value = 0 THEN NULL
                            ELSE uc.actual_value * 1.0 / c.goal_value
                           END
               )
        FROM user_challenge uc
                 JOIN challenge c ON uc.challenge_id = c.id
        WHERE uc.challenge_id = #{challengeId}
    </select>

    <select id="findChallengeById" resultType="org.scoula.challenge.domain.Challenge">
        SELECT * FROM challenge WHERE id = #{challengeId}
    </select>

    <select id="isUserParticipating" resultType="boolean">
        SELECT COUNT(*) > 0 FROM user_challenge
        WHERE user_id = #{userId} AND challenge_id = #{challengeId}
    </select>

    <select id="getGroupMembersWithAvatar"
            resultType="org.scoula.challenge.dto.ChallengeMemberDTO">
        SELECT
            u.id  AS userId,
            us.nickname AS nickname,
            CASE WHEN c.goal_value IS NULL OR c.goal_value = 0 THEN 0
                 ELSE uc.actual_value * 1.0 / c.goal_value
                END AS progress,
            a.level_id     AS levelId,
            a.top_id       AS topId,
            a.shoes_id     AS shoesId,
            a.accessory_id AS accessoryId,
            a.gift_card_id AS giftCardId
        FROM user_challenge uc
                 JOIN user u        ON uc.user_id = u.id
                 JOIN user_status us ON us.id = u.id
                 JOIN challenge c    ON c.id = uc.challenge_id
                 LEFT JOIN avatar a  ON a.id = u.id
        WHERE uc.challenge_id = #{challengeId}
    </select>

    <update id="incrementParticipantCount">
        UPDATE challenge
        SET participant_count = participant_count + 1
        WHERE id = #{challengeId}
    </update>

    <update id="updateChallengeStatus">
        UPDATE challenge
        SET status = #{status}
        WHERE id = #{challengeId}
    </update>

    <select id="findAllChallenges" resultType="org.scoula.challenge.domain.Challenge">
        SELECT * FROM challenge
    </select>

    <update id="completeUserChallenges">
        UPDATE user_challenge
        SET is_completed = true, updated_at = NOW()
        WHERE challenge_id = #{challengeId}
    </update>

    <select id="findUserIdsByChallengeId" resultType="long">
        SELECT user_id FROM user_challenge WHERE challenge_id = #{challengeId}
    </select>

    <update id="updateActualValue">
        UPDATE user_challenge
        SET actual_value = #{actualValue}
        WHERE user_id = #{userId} AND challenge_id = #{challengeId}
    </update>

    <update id="failUserChallenge">
        UPDATE user_challenge
        SET is_success = false, is_completed = true, updated_at = NOW()
        WHERE user_id = #{userId} AND challenge_id = #{challengeId}
    </update>

    <update id="succeedUserChallenge">
        UPDATE user_challenge
        SET is_success = true, is_completed = true, updated_at = NOW()
        WHERE user_id = #{userId} AND challenge_id = #{challengeId}
    </update>

    <select id="getCategoryNameById" resultType="string">
        SELECT name FROM challenge_category WHERE id = #{categoryId}
    </select>

    <select id="getChallengeSummary" resultType="org.scoula.challenge.dto.ChallengeSummaryResponseDTO">
        SELECT
            total_challenges AS totalChallenges,
            success_count AS successCount,
            achievement_rate AS achievementRate
        FROM user_challenge_summary
        WHERE id = #{userId}
    </select>

    <insert id="insertOrUpdateUserChallengeSummary">
        INSERT INTO user_challenge_summary (id, total_challenges, success_count, achievement_rate)
        VALUES (#{userId}, 0, 0, 0.00)
            ON DUPLICATE KEY UPDATE id = id
    </insert>

    <update id="incrementUserTotalChallenges">
        UPDATE user_challenge_summary
        SET total_challenges = total_challenges + 1
        WHERE id = #{userId}
    </update>

    <update id="incrementUserSuccessCount">
        UPDATE user_challenge_summary
        SET success_count = success_count + 1
        WHERE id = #{userId}
    </update>

    <update id="updateAchievementRate">
        UPDATE user_challenge_summary
        SET achievement_rate = ROUND(success_count * 100.0 / total_challenges, 2)
        WHERE id = #{userId} AND total_challenges > 0
    </update>

    <select id="getActualValue" resultType="int">
        SELECT actual_value FROM user_challenge
        WHERE user_id = #{userId} AND challenge_id = #{challengeId}
    </select>

    <select id="getActualRewardPoint" resultType="java.lang.Integer">
        SELECT actual_reward_point FROM user_challenge
        WHERE user_id = #{userId} AND challenge_id = #{challengeId}
    </select>

    <update id="markResultChecked">
        UPDATE user_challenge
        SET result_checked = 1
        WHERE user_id = #{userId} AND challenge_id = #{challengeId}
    </update>

    <select id="existsUnconfirmedCompletedChallenge" resultType="boolean">
        SELECT EXISTS (
            SELECT 1 FROM user_challenge uc
                              JOIN challenge c ON uc.challenge_id = c.id
            WHERE uc.user_id = #{userId}
              AND uc.result_checked = 0
              AND c.status = 'COMPLETED'
        )
    </select>

    <select id="isResultChecked" resultType="boolean">
        SELECT result_checked FROM user_challenge
        WHERE user_id = #{userId} AND challenge_id = #{challengeId}
    </select>

    <select id="countSuccessMembers" resultType="int">
        SELECT COUNT(*) FROM user_challenge
        WHERE challenge_id = #{challengeId} AND is_success = 1
    </select>

    <update id="saveActualRewardPoint">
        UPDATE user_challenge
        SET actual_reward_point = #{actualRewardPoint}
        WHERE user_id = #{userId} AND challenge_id = #{challengeId}
    </update>

    <select id="findCompletedHistoryByUser" resultType="org.scoula.challenge.dto.ChallengeHistoryItemDTO">
        SELECT
            uc.challenge_id              AS challengeId,
            c.title                      AS title,
            cc.name                      AS categoryName,
            c.type                       AS type,
            c.start_date                 AS startDate,
            c.end_date                   AS endDate,
            uc.is_success                AS isSuccess,
            uc.is_completed              AS isCompleted,
            uc.actual_value              AS actualValue,
            c.goal_value                 AS goalValue,
            uc.actual_reward_point       AS actualRewardPoint,
            uc.result_checked            AS resultChecked,
            DATE(uc.updated_at)          AS completedAt
        FROM user_challenge uc
            JOIN challenge c ON uc.challenge_id = c.id
            LEFT JOIN challenge_category cc ON c.category_id = cc.id
        WHERE uc.user_id = #{userId}
          AND uc.is_completed = 1
        ORDER BY uc.updated_at DESC
    </select>

    <select id="getIsSuccess" resultType="java.lang.Boolean">
        SELECT uc.is_success
        FROM user_challenge uc
        WHERE uc.user_id = #{userId} AND uc.challenge_id = #{challengeId}
    </select>

    <!-- ====== ⬇️ 추가: 평가/상태 일괄 처리용 쿼리들 ⬇️ ====== -->

    <!-- 진행 중 챌린지 -->
    <select id="findInProgressChallenges" resultType="org.scoula.challenge.domain.Challenge">
        SELECT * FROM challenge
        WHERE status = 'IN_PROGRESS'
    </select>

    <!-- 해당 챌린지에서 아직 미완료인 사용자 -->
    <select id="findActiveUsers" resultType="long">
        SELECT uc.user_id
        FROM user_challenge uc
        WHERE uc.challenge_id = #{challengeId}
          AND uc.is_completed = 0
    </select>

    <!-- 어제 기준 종료된 챌린지 (최종 평가 필요) -->
    <select id="findEndedChallengesNeedingEvaluation" resultType="org.scoula.challenge.domain.Challenge">
        SELECT c.*
        FROM challenge c
        WHERE c.end_date &lt; CURDATE()
    </select>

    <!-- 오늘 시작 챌린지 IN_PROGRESS -->
    <update id="setTodayToInProgress">
        UPDATE challenge
        SET status = 'IN_PROGRESS'
        WHERE status IN ('RECRUITING','CLOSED')
          AND start_date = CURDATE()
    </update>

    <!-- 종료 지난 챌린지 COMPLETED -->
    <update id="setEndedToCompleted">
        UPDATE challenge
        SET status = 'COMPLETED'
        WHERE status &lt;&gt; 'COMPLETED'
        AND end_date &lt; CURDATE()
    </update>

    <!-- COMPLETED 챌린지의 user_challenge 완료 처리(안전망) -->
    <update id="completeUserChallengesByCompletedChallenge">
        UPDATE user_challenge uc
            JOIN challenge c ON uc.challenge_id = c.id
            SET uc.is_completed = 1,
                uc.updated_at = NOW()
        WHERE c.status = 'COMPLETED'
          AND uc.is_completed = 0
    </update>
</mapper>
